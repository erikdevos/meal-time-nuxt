import{u as v,p as y,q as h,r as _,s as w,c as p,a as u,t as d,v as g,o as m}from"./CHNDAior.js";const k="$s";function x(...n){const a=typeof n[n.length-1]=="string"?n.pop():void 0;typeof n[0]!="string"&&n.unshift(a);const[s,o]=n;if(!s||typeof s!="string")throw new TypeError("[nuxt] [useState] key must be a string: "+s);if(o!==void 0&&typeof o!="function")throw new Error("[nuxt] [useState] init must be a function: "+o);const l=k+s,r=v(),e=y(r.payload.state,l);if(e.value===void 0&&o){const t=o();if(h(t))return r.payload.state[l]=t,t;e.value=t}return e}const M={key:0},E={key:1},S={__name:"[meal-name]",setup(n){const a=_(null),s=g(),o=x(()=>({}),"$Pt5W7T4E04"),l=e=>e.toLowerCase().replace(/\s+/g,"_").replace(/[^a-z0-9_]/gi,""),r=async e=>{try{if(o.value[e]){a.value=o.value[e];return}const c=await(await fetch("https://erikdevos.github.io/meal-time-data/meals.json")).json();console.log("Fetched data:",c),console.log("Meal name to search for:",e);const i=c.find(f=>f.naam&&l(f.naam)===e)||null;a.value=i,i?o.value[e]=i:console.warn(`No meal found with name: ${e}`)}catch(t){console.error("Error fetching meal detail:",t)}};return w(()=>{const e=s.params["meal-name"];console.log("Route param meal-name:",e),e?r(e):console.warn("No meal name in URL")}),(e,t)=>a.value?(m(),p("div",M,[u("h1",null,d(a.value.name),1),u("p",null,d(a.value.description),1)])):(m(),p("div",E,t[0]||(t[0]=[u("p",null,"Meal not found",-1)])))}};export{S as default};
